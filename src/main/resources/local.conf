akka {
  extensions = [akka.persistence.Persistence]

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  log-config-on-start = off
  loggers = ["akka.event.Logging$DefaultLogger"]
  loglevel = INFO
  stdout-loglevel = INFO

  actor {
    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "java.io.Serializable" = kryo
    }
  }

  persistence {
    journal {
      plugin = "akka.persistence.cassandra.journal"
      auto-start-journals = ["akka.persistence.cassandra.journal"]
    }
    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      auto-start-snapshot-stores = ["akka.persistence.snapshot-store.local"]
      local.dir = "build/snapshot"
    }
    cassandra {
      session-provider = "akka.stream.alpakka.cassandra.DefaultSessionProvider"
      session-dispatcher = "akka.persistence.cassandra.default-dispatcher"
      datastax-java-driver-config = "datastax-java-driver"
      events-by-tag {
        pubsub-notification = on
      }
    }
  }
}

datastax-java-driver {
  basic {
    load-balancing-policy {
      local-datacenter = "datacenter1"
    }
    contact-points = ["127.0.0.1:9042"]
    session-keyspace = "akka"
  }
  advanced {
    auth-provider {
      class = PlainTextAuthProvider
      username = cassandra
      password = cassandra
    }
    reconnect-on-init = true
  }
}

konomas {
  jwt {
    secret = ${KONOMAS_JWT_SECRET}
    issuer = "http://localhost:8080"
    audience = "http://localhost:8080/api"
    realm = "konomauth"
  }
  server {
    port = 8080
    host = "localhost"
  }
}

ktor {
  development = true
}
